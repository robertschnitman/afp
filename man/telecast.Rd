% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/telecast.r
\name{telecast}
\alias{telecast}
\title{Apply common function over multiple objects independent of each other}
\usage{
telecast(f, l, ...)
chain(f, l)
}
\arguments{
\item{f}{A function to apply to the collection(s).}

\item{l}{List of data objects.}

\item{...}{Parameters passed to \code{\link{mapply}}.}
}
\value{
List for \code{telecast}, matrix for \code{chain}.
}
\description{
Apply common function over multiple objects independent of each other.
}
\examples{
l <- list(mc = mtcars, aq = airquality, lcs = LifeCycleSavings) # Store to reference easily for the two examples below.

## 1. Extract means for each variable from 3 datasets.
mean.nr <- function(x) mean(x, na.rm = TRUE) # airquality has NA values.
output1 <- telecast(mean.nr, l) 
output1 # Compare: lapply(l, function(x) mapply(mean.nr, x))

## 2. Derive distinct iterative reductions along with Reduce().
red.div <- function(y) Reduce(`/`, y)
output2 <- telecast(red.div, l) 
output2 # Compare: lapply(l, function(x) mapply(red.div, x))

## 3. Apply function to subsets and output to matrix.
l <- split(mtcars, mtcars$cyl) 
chain(mean, l) # all(chain(mean, l) == t(sapply(l, function(z) sapply(z, mean))))

}
\seealso{
\url{https://github.com/robertschnitman/afp}, \code{\link{dot}}, \code{\link{mapply}}, \code{\link{lapply}}, 
\code{broadcast} from Julia: \url{https://docs.julialang.org/en/v0.6.1/manual/arrays/#Broadcasting-1}
}
