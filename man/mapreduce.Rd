% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mapreduce.R
\name{mapreduce}
\alias{mapreduce}
\title{Apply function over collection and then iteratively reduce it a la` mapreduce() from Julia}
\usage{
mapreduce(f, o, x, y = NULL, ...)
}
\arguments{
\item{f}{A function to apply to the collection.}

\item{o}{A binary operator. Typically arithmetic operators, but can be another (binary) function.}

\item{x}{A collection, such as a a list, matrix, or data frame.}

\item{y}{A list of additional arguments from \code{f}. Passed to MoreArgs from \code{\link{Map}}.}

\item{...}{Arguments passed to \code{\link{Reduce}}.}
}
\description{
Apply function over collection and then iteratively reduce it a la` mapreduce() from Julia
}
\details{
A simplified \code{mapreduce} from Julia with a multivariate option.

Base R has functionals that output a list by way of \code{\link{lapply()}} and \code{\link{Map}} (among others), while \code{\link{Reduce}} diminishes given elements in a consecutive manner until a single result remains. To reduce the output of a mapping, the mentioned functions are required. 

In turn, \code{mapreduce} simplifies this process.
}
\examples{
# 1. Apply a function to 3 matrices and consecutively divide them.
matrixl <- list(A = matrix(c(1:9), 3, 3), B = matrix(10:18, 3, 3), C = matrix(19:27, 3, 3))
output1 <- mapreduce(function(x) x^2 + 1, `/`, matrixl) 
output1 # matrix 3x3

# 2. Use multiple arguments.
matrixl <- list(A = matrix(c(1:9), 3, 3), B = matrix(10:18, 3, 3), C = matrix(19:27, 3, 3))
output2 <- with(matrixl, mapreduce(function(i, j, k) i*j - k, `/`, A, list(B, C)))
output2 <- matrix 3x3

}
\seealso{
\url{https://github.com/robertschnitman/afp}, \code{\link{Map}}, \code{\link{Reduce}}
\code{mapreduce} from Julia:\url{https://docs.julialang.org/en/v0.6.1/stdlib/collections/#Base.mapreduce-NTuple{4,Any}}
}
